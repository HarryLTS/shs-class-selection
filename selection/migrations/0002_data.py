# Generated by Django 2.2.2 on 2019-07-18 16:43

from django.db import migrations

import json
import os
import re

FIXTURE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '../fixtures'))
FIXTURE_FILENAME = 'raw_students.json'
LEAST_SUCCESSOR_THRESHOLD = 4


class CreditDummy:
    def __init__(self):
        self.name = ""
        self.year = 0
        self.s1_total = 0
        self.s1_cat_grades = {}
        self.s2_total = 0
        self.s2_cat_grades = {}

    def grade_to_float(self, grade):
        if isinstance(grade, str):
            return float(re.sub('[^\d.]+', '', grade).strip())
        return grade

    def year_as_integer(self, year):
        return int(year.split("-")[0])


def populate_tables(apps, schema_editor):
    with open(os.path.join(FIXTURE_DIR, FIXTURE_FILENAME), 'r') as JSON:
        json_dict = json.load(JSON)

    Student = apps.get_model("selection", "Student")
    Credit = apps.get_model("selection", "Credit")
    Course = apps.get_model("selection", "Course")

    all_courses = {}
    all_courses_s1_cat_names = {}
    all_courses_s2_cat_names = {}
    for student_id, data in json_dict.items():
        taken_courses = data['Courses']
        if Student.objects.filter(id=student_id).exists():
            student = Student.objects.get(student_id)
            for credit in student.credits.all():
                cdr = {
                    "Name": credit.name,
                    "Year": str(credit.year) + "-" + str(credit.year + 1),
                    "Grades": {
                        "S1": {
                            "Total":str(round((credit.s1_total * 100), 2)) + "%",
                            "Categories":json.loads(credit.s1_cat_grades)
                        },
                        "S2": {
                            "Total": str(round((credit.s2_total * 100), 2)) + "%",
                            "Categories":json.loads(credit.s2_cat_grades)
                        }
                    }
                }
                taken_courses.append(cdr)
            student.credits.clear()
        else:
            student = Student(id=student_id)
            student.save()

        taken_courses.sort(key=lambda x: x['Year'])
        prev_cd = None
        for course in taken_courses:
            cd = CreditDummy()
            cd.name = course['Name']
            cd.year = cd.year_as_integer(course['Year'])

            cd.s1_total = cd.grade_to_float(course['Grades']['S1']['Total']) / 100
            for cat, grade in course['Grades']['S1']['Categories'].items():
                cd.s1_cat_grades[cat] = grade

            cd.s2_total = cd.grade_to_float(course['Grades']['S2']['Total']) / 100
            for cat, grade in course['Grades']['S2']['Categories'].items():
                cd.s2_cat_grades[cat] = grade

            if cd.name not in all_courses:
                all_courses[cd.name] = {}
                all_courses_s1_cat_names[cd.name] = {}
                all_courses_s2_cat_names[cd.name] = {}

            if cd.s1_cat_grades and not all_courses_s1_cat_names[cd.name]:
                all_courses_s1_cat_names[cd.name] = list(cd.s1_cat_grades.keys())

            if cd.s2_cat_grades and not all_courses_s2_cat_names[cd.name]:
                all_courses_s2_cat_names[cd.name] = list(cd.s2_cat_grades.keys())

            if prev_cd and prev_cd.year + 1 == cd.year:
                all_courses[prev_cd.name][cd.name] = all_courses[prev_cd.name].get(cd.name, 0) + 1

            prev_cd = cd
            credit = Credit(name=cd.name, year=cd.year, s1_total=cd.s1_total,
                            s1_cat_grades=json.dumps(cd.s1_cat_grades), s2_total=cd.s2_total,
                            s2_cat_grades=json.dumps(cd.s2_cat_grades))
            credit.save()
            student.credits.add(credit)

    for course_name, successors in all_courses.items():
        common_successors = []
        for successor_name, count in successors.items():
            if count > LEAST_SUCCESSOR_THRESHOLD:
                common_successors.append(successor_name)

        if Course.objects.filter(name=course_name).exists():
            course = Course.objects.filter(name=course_name)[0]
            existing_successors = set(json.loads(course.successors))
            for c_successor in common_successors:
                existing_successors.add(c_successor)
            course.successors = json.dumps(list(existing_successors))
        else:
            course = Course(name=course_name, successors=json.dumps(common_successors),
                            s1_cat_names=json.dumps(all_courses_s1_cat_names[course_name]),
                            s2_cat_names=json.dumps(all_courses_s2_cat_names[course_name]))
            course.save()


class Migration(migrations.Migration):
    dependencies = [
        ('selection', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(populate_tables),
    ]
